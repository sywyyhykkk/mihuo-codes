(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["XSoftIMSdk"] = factory();
	else
		root["XSoftIMSdk"] = factory();
})(this, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 322:
/***/ (function(module) {

(function (factory) {
    if (true) {
        // Node/CommonJS
        module.exports = factory();
    } else { var glob; }
}(function (undefined) {

    'use strict';

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },
        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


    function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    }

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "common": function() { return /* reexport */ common_namespaceObject; },
  "enums": function() { return /* reexport */ enums_namespaceObject; },
  "extensions": function() { return /* reexport */ extensions_string_namespaceObject; },
  "filehelper": function() { return /* reexport */ file_helper_namespaceObject; },
  "files": function() { return /* reexport */ files_namespaceObject; },
  "httphelper": function() { return /* reexport */ http_helper_namespaceObject; },
  "messages": function() { return /* reexport */ messages_namespaceObject; }
});

// NAMESPACE OBJECT: ./src/models/enums.ts
var enums_namespaceObject = {};
__webpack_require__.r(enums_namespaceObject);
__webpack_require__.d(enums_namespaceObject, {
  "CommandType": function() { return CommandType; },
  "ContentType": function() { return ContentType; },
  "MessageTypeEnum": function() { return MessageTypeEnum; },
  "Platform": function() { return Platform; },
  "SessionType": function() { return SessionType; },
  "StatusType": function() { return StatusType; }
});

// NAMESPACE OBJECT: ./src/models/files.ts
var files_namespaceObject = {};
__webpack_require__.r(files_namespaceObject);
__webpack_require__.d(files_namespaceObject, {
  "FileInfo": function() { return FileInfo; }
});

// NAMESPACE OBJECT: ./src/utils/common.ts
var common_namespaceObject = {};
__webpack_require__.r(common_namespaceObject);
__webpack_require__.d(common_namespaceObject, {
  "Guid": function() { return Guid; },
  "GuidMini": function() { return GuidMini; },
  "ImException": function() { return ImException; },
  "ToMessagePackBuffer": function() { return ToMessagePackBuffer; },
  "http": function() { return http; },
  "print": function() { return print; }
});

// NAMESPACE OBJECT: ./src/models/messages.ts
var messages_namespaceObject = {};
__webpack_require__.r(messages_namespaceObject);
__webpack_require__.d(messages_namespaceObject, {
  "GroupMessage": function() { return GroupMessage; },
  "MessageBase": function() { return MessageBase; },
  "NormalMessage": function() { return NormalMessage; }
});

// NAMESPACE OBJECT: ./src/utils/extensions.string.ts
var extensions_string_namespaceObject = {};
__webpack_require__.r(extensions_string_namespaceObject);
__webpack_require__.d(extensions_string_namespaceObject, {
  "_exts": function() { return _exts; },
  "_map": function() { return _map; }
});

// NAMESPACE OBJECT: ./src/helpers/http_helper.ts
var http_helper_namespaceObject = {};
__webpack_require__.r(http_helper_namespaceObject);
__webpack_require__.d(http_helper_namespaceObject, {
  "IMRequest": function() { return IMRequest; },
  "MessageCallBack": function() { return MessageCallBack; }
});

// NAMESPACE OBJECT: ./src/helpers/file_helper.ts
var file_helper_namespaceObject = {};
__webpack_require__.r(file_helper_namespaceObject);
__webpack_require__.d(file_helper_namespaceObject, {
  "FileHelper": function() { return FileHelper; }
});

;// CONCATENATED MODULE: ./src/models/enums.ts
/** 在此处定义命令 */
var CommandType;
(function (CommandType) {
    /** 退出 */
    CommandType[CommandType["Exit"] = 0] = "Exit";
    /** ping 命令 */
    CommandType[CommandType["Ping"] = 1] = "Ping";
    /** 某人被踢出群聊 */
    CommandType[CommandType["GroupKick"] = 2] = "GroupKick";
    /** 某人成为管理员 */
    CommandType[CommandType["GroupBecomeAdmin"] = 3] = "GroupBecomeAdmin";
    /** 群组解散 */
    CommandType[CommandType["GroupBreak"] = 4] = "GroupBreak";
    /** 邀请进群 */
    CommandType[CommandType["GroupJoinInvite"] = 5] = "GroupJoinInvite";
    /** 用户同意进群 */
    CommandType[CommandType["GroupAgreeJoin"] = 6] = "GroupAgreeJoin";
    /** 用户不同意进群 */
    CommandType[CommandType["GroupDisagreeJoin"] = 7] = "GroupDisagreeJoin";
    /** 撤回消息 */
    CommandType[CommandType["Recall"] = 8] = "Recall";
    /** @deprecated 更新会话 */
    CommandType[CommandType["UpdateSession"] = 9] = "UpdateSession";
    /** 更新消息 */
    CommandType[CommandType["UpdateMessage"] = 10] = "UpdateMessage";
    /** 更新群组 */
    CommandType[CommandType["GroupUpdate"] = 11] = "GroupUpdate";
    /** 用户资料更新 */
    CommandType[CommandType["UserUpdate"] = 12] = "UserUpdate";
})(CommandType || (CommandType = {}));
/** 消息内容类型 */
var ContentType;
(function (ContentType) {
    /** 撤回消息 */
    ContentType[ContentType["ReCall"] = 0] = "ReCall";
    /** 纯文本 */
    ContentType[ContentType["Text"] = 1] = "Text";
    /** 超链接 */
    ContentType[ContentType["Link"] = 2] = "Link";
    /** 图片 */
    ContentType[ContentType["Image"] = 3] = "Image";
    /** 语言 */
    ContentType[ContentType["Voice"] = 4] = "Voice";
    /** 视频 */
    ContentType[ContentType["Video"] = 5] = "Video";
    /** 文件 */
    ContentType[ContentType["File"] = 6] = "File";
    /** 自定义类型 */
    ContentType[ContentType["Custom"] = 7] = "Custom";
})(ContentType || (ContentType = {}));
/** 消息结构类型 */
var MessageTypeEnum;
(function (MessageTypeEnum) {
    /** 普通消息 */
    MessageTypeEnum[MessageTypeEnum["Normal"] = 0] = "Normal";
    /** 群组消息 */
    MessageTypeEnum[MessageTypeEnum["Group"] = 1] = "Group";
})(MessageTypeEnum || (MessageTypeEnum = {}));
/** 消息状态 */
var StatusType;
(function (StatusType) {
    /** 未读 */
    StatusType[StatusType["UnRead"] = 0] = "UnRead";
    /** 已读 */
    StatusType[StatusType["Readed"] = 1] = "Readed";
    /** 确认 */
    StatusType[StatusType["Confirmed"] = 2] = "Confirmed";
})(StatusType || (StatusType = {}));
/** 会话类型 */
var SessionType;
(function (SessionType) {
    /** 个人会话 */
    SessionType[SessionType["Normal"] = 1] = "Normal";
    /** 群组会话 */
    SessionType[SessionType["Group"] = 2] = "Group";
})(SessionType || (SessionType = {}));
/** 平台类型 */
var Platform;
(function (Platform) {
    /** 未知 */
    Platform[Platform["Unknown"] = 0] = "Unknown";
    /** 自定义 */
    Platform[Platform["Customized"] = 1] = "Customized";
    /** 个人电脑 */
    Platform[Platform["PC"] = 2] = "PC";
    /** 平板设备 */
    Platform[Platform["Pad"] = 3] = "Pad";
    /** 智能手机 */
    Platform[Platform["Phone"] = 4] = "Phone";
    /** 智能手表 */
    Platform[Platform["Watch"] = 5] = "Watch";
    /** 浏览器 */
    Platform[Platform["WebBrowser"] = 6] = "WebBrowser";
    /** 小程序 */
    Platform[Platform["MiniPrograms"] = 7] = "MiniPrograms";
})(Platform || (Platform = {}));

;// CONCATENATED MODULE: ./src/models/files.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * 下载的文件信息
 */
var FileInfo = /** @class */ (function () {
    function FileInfo(fileName, data) {
        this.fileName = fileName;
        this.data = data;
    }
    Object.defineProperty(FileInfo.prototype, "fileExt", {
        /** 文件扩展名 */
        get: function () { return this.fileName.substring(this.fileName.lastIndexOf('.')); },
        enumerable: false,
        configurable: true
    });
    /** 文件大小 */
    FileInfo.prototype.fileSize = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.data];
                case 1: return [2 /*return*/, (_a.sent()).size];
            }
        }); });
    };
    ;
    return FileInfo;
}());


;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/utils/int.mjs
// Integer Utility
var UINT32_MAX = 4294967295;
// DataView extension to handle int64 / uint64,
// where the actual range is 53-bits integer (a.k.a. safe integer)
function setUint64(view, offset, value) {
    var high = value / 4294967296;
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
    var high = Math.floor(value / 4294967296);
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
    var high = view.getInt32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
}
function getUint64(view, offset) {
    var high = view.getUint32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
}
//# sourceMappingURL=int.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/utils/utf8.mjs

var TEXT_ENCODING_AVAILABLE = (typeof process === "undefined" || undefined !== "never") &&
    typeof TextEncoder !== "undefined" &&
    typeof TextDecoder !== "undefined";
function utf8Count(str) {
    var strLength = str.length;
    var byteLength = 0;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            byteLength++;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            byteLength += 2;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                byteLength += 3;
            }
            else {
                // 4-byte
                byteLength += 4;
            }
        }
    }
    return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
    var strLength = str.length;
    var offset = outputOffset;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            output[offset++] = value;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
            else {
                // 4-byte
                output[offset++] = ((value >> 18) & 0x07) | 0xf0;
                output[offset++] = ((value >> 12) & 0x3f) | 0x80;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
        }
        output[offset++] = (value & 0x3f) | 0x80;
    }
}
var sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;
var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
    ? UINT32_MAX
    : typeof process !== "undefined" && undefined !== "force"
        ? 200
        : 0;
function utf8EncodeTEencode(str, output, outputOffset) {
    output.set(sharedTextEncoder.encode(str), outputOffset);
}
function utf8EncodeTEencodeInto(str, output, outputOffset) {
    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
    var offset = inputOffset;
    var end = offset + byteLength;
    var units = [];
    var result = "";
    while (offset < end) {
        var byte1 = bytes[offset++];
        if ((byte1 & 0x80) === 0) {
            // 1 byte
            units.push(byte1);
        }
        else if ((byte1 & 0xe0) === 0xc0) {
            // 2 bytes
            var byte2 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 6) | byte2);
        }
        else if ((byte1 & 0xf0) === 0xe0) {
            // 3 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);
        }
        else if ((byte1 & 0xf8) === 0xf0) {
            // 4 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            var byte4 = bytes[offset++] & 0x3f;
            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;
            if (unit > 0xffff) {
                unit -= 0x10000;
                units.push(((unit >>> 10) & 0x3ff) | 0xd800);
                unit = 0xdc00 | (unit & 0x3ff);
            }
            units.push(unit);
        }
        else {
            units.push(byte1);
        }
        if (units.length >= CHUNK_SIZE) {
            result += String.fromCharCode.apply(String, units);
            units.length = 0;
        }
    }
    if (units.length > 0) {
        result += String.fromCharCode.apply(String, units);
    }
    return result;
}
var sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;
var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
    ? UINT32_MAX
    : typeof process !== "undefined" && undefined !== "force"
        ? 200
        : 0;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
    return sharedTextDecoder.decode(stringBytes);
}
//# sourceMappingURL=utf8.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/ExtData.mjs
/**
 * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.
 */
var ExtData = /** @class */ (function () {
    function ExtData(type, data) {
        this.type = type;
        this.data = data;
    }
    return ExtData;
}());

//# sourceMappingURL=ExtData.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/DecodeError.mjs
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DecodeError = /** @class */ (function (_super) {
    __extends(DecodeError, _super);
    function DecodeError(message) {
        var _this = _super.call(this, message) || this;
        // fix the prototype chain in a cross-platform way
        var proto = Object.create(DecodeError.prototype);
        Object.setPrototypeOf(_this, proto);
        Object.defineProperty(_this, "name", {
            configurable: true,
            enumerable: false,
            value: DecodeError.name,
        });
        return _this;
    }
    return DecodeError;
}(Error));

//# sourceMappingURL=DecodeError.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/timestamp.mjs
// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type


var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int
var TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int
function encodeTimeSpecToTimestamp(_a) {
    var sec = _a.sec, nsec = _a.nsec;
    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
        // Here sec >= 0 && nsec >= 0
        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
            // timestamp 32 = { sec32 (unsigned) }
            var rv = new Uint8Array(4);
            var view = new DataView(rv.buffer);
            view.setUint32(0, sec);
            return rv;
        }
        else {
            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }
            var secHigh = sec / 0x100000000;
            var secLow = sec & 0xffffffff;
            var rv = new Uint8Array(8);
            var view = new DataView(rv.buffer);
            // nsec30 | secHigh2
            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));
            // secLow32
            view.setUint32(4, secLow);
            return rv;
        }
    }
    else {
        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
        var rv = new Uint8Array(12);
        var view = new DataView(rv.buffer);
        view.setUint32(0, nsec);
        setInt64(view, 4, sec);
        return rv;
    }
}
function encodeDateToTimeSpec(date) {
    var msec = date.getTime();
    var sec = Math.floor(msec / 1e3);
    var nsec = (msec - sec * 1e3) * 1e6;
    // Normalizes { sec, nsec } to ensure nsec is unsigned.
    var nsecInSec = Math.floor(nsec / 1e9);
    return {
        sec: sec + nsecInSec,
        nsec: nsec - nsecInSec * 1e9,
    };
}
function encodeTimestampExtension(object) {
    if (object instanceof Date) {
        var timeSpec = encodeDateToTimeSpec(object);
        return encodeTimeSpecToTimestamp(timeSpec);
    }
    else {
        return null;
    }
}
function decodeTimestampToTimeSpec(data) {
    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
    // data may be 32, 64, or 96 bits
    switch (data.byteLength) {
        case 4: {
            // timestamp 32 = { sec32 }
            var sec = view.getUint32(0);
            var nsec = 0;
            return { sec: sec, nsec: nsec };
        }
        case 8: {
            // timestamp 64 = { nsec30, sec34 }
            var nsec30AndSecHigh2 = view.getUint32(0);
            var secLow32 = view.getUint32(4);
            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;
            var nsec = nsec30AndSecHigh2 >>> 2;
            return { sec: sec, nsec: nsec };
        }
        case 12: {
            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
            var sec = getInt64(view, 4);
            var nsec = view.getUint32(0);
            return { sec: sec, nsec: nsec };
        }
        default:
            throw new DecodeError("Unrecognized data size for timestamp (expected 4, 8, or 12): " + data.length);
    }
}
function decodeTimestampExtension(data) {
    var timeSpec = decodeTimestampToTimeSpec(data);
    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
    type: EXT_TIMESTAMP,
    encode: encodeTimestampExtension,
    decode: decodeTimestampExtension,
};
//# sourceMappingURL=timestamp.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/ExtensionCodec.mjs
// ExtensionCodec to handle MessagePack extensions


var ExtensionCodec = /** @class */ (function () {
    function ExtensionCodec() {
        // built-in extensions
        this.builtInEncoders = [];
        this.builtInDecoders = [];
        // custom extensions
        this.encoders = [];
        this.decoders = [];
        this.register(timestampExtension);
    }
    ExtensionCodec.prototype.register = function (_a) {
        var type = _a.type, encode = _a.encode, decode = _a.decode;
        if (type >= 0) {
            // custom extensions
            this.encoders[type] = encode;
            this.decoders[type] = decode;
        }
        else {
            // built-in extensions
            var index = 1 + type;
            this.builtInEncoders[index] = encode;
            this.builtInDecoders[index] = decode;
        }
    };
    ExtensionCodec.prototype.tryToEncode = function (object, context) {
        // built-in extensions
        for (var i = 0; i < this.builtInEncoders.length; i++) {
            var encodeExt = this.builtInEncoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = -1 - i;
                    return new ExtData(type, data);
                }
            }
        }
        // custom extensions
        for (var i = 0; i < this.encoders.length; i++) {
            var encodeExt = this.encoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = i;
                    return new ExtData(type, data);
                }
            }
        }
        if (object instanceof ExtData) {
            // to keep ExtData as is
            return object;
        }
        return null;
    };
    ExtensionCodec.prototype.decode = function (data, type, context) {
        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
        if (decodeExt) {
            return decodeExt(data, type, context);
        }
        else {
            // decode() does not fail, returns ExtData instead.
            return new ExtData(type, data);
        }
    };
    ExtensionCodec.defaultCodec = new ExtensionCodec();
    return ExtensionCodec;
}());

//# sourceMappingURL=ExtensionCodec.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/utils/typedArrays.mjs
function ensureUint8Array(buffer) {
    if (buffer instanceof Uint8Array) {
        return buffer;
    }
    else if (ArrayBuffer.isView(buffer)) {
        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    else if (buffer instanceof ArrayBuffer) {
        return new Uint8Array(buffer);
    }
    else {
        // ArrayLike<number>
        return Uint8Array.from(buffer);
    }
}
function createDataView(buffer) {
    if (buffer instanceof ArrayBuffer) {
        return new DataView(buffer);
    }
    var bufferView = ensureUint8Array(buffer);
    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);
}
//# sourceMappingURL=typedArrays.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/Encoder.mjs




var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = /** @class */ (function () {
    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {
        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }
        if (context === void 0) { context = undefined; }
        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }
        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }
        if (sortKeys === void 0) { sortKeys = false; }
        if (forceFloat32 === void 0) { forceFloat32 = false; }
        if (ignoreUndefined === void 0) { ignoreUndefined = false; }
        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }
        this.extensionCodec = extensionCodec;
        this.context = context;
        this.maxDepth = maxDepth;
        this.initialBufferSize = initialBufferSize;
        this.sortKeys = sortKeys;
        this.forceFloat32 = forceFloat32;
        this.ignoreUndefined = ignoreUndefined;
        this.forceIntegerToFloat = forceIntegerToFloat;
        this.pos = 0;
        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
        this.bytes = new Uint8Array(this.view.buffer);
    }
    Encoder.prototype.getUint8Array = function () {
        return this.bytes.subarray(0, this.pos);
    };
    Encoder.prototype.reinitializeState = function () {
        this.pos = 0;
    };
    Encoder.prototype.encode = function (object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.getUint8Array();
    };
    Encoder.prototype.doEncode = function (object, depth) {
        if (depth > this.maxDepth) {
            throw new Error("Too deep objects in depth " + depth);
        }
        if (object == null) {
            this.encodeNil();
        }
        else if (typeof object === "boolean") {
            this.encodeBoolean(object);
        }
        else if (typeof object === "number") {
            this.encodeNumber(object);
        }
        else if (typeof object === "string") {
            this.encodeString(object);
        }
        else {
            this.encodeObject(object, depth);
        }
    };
    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {
        var requiredSize = this.pos + sizeToWrite;
        if (this.view.byteLength < requiredSize) {
            this.resizeBuffer(requiredSize * 2);
        }
    };
    Encoder.prototype.resizeBuffer = function (newSize) {
        var newBuffer = new ArrayBuffer(newSize);
        var newBytes = new Uint8Array(newBuffer);
        var newView = new DataView(newBuffer);
        newBytes.set(this.bytes);
        this.view = newView;
        this.bytes = newBytes;
    };
    Encoder.prototype.encodeNil = function () {
        this.writeU8(0xc0);
    };
    Encoder.prototype.encodeBoolean = function (object) {
        if (object === false) {
            this.writeU8(0xc2);
        }
        else {
            this.writeU8(0xc3);
        }
    };
    Encoder.prototype.encodeNumber = function (object) {
        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {
            if (object >= 0) {
                if (object < 0x80) {
                    // positive fixint
                    this.writeU8(object);
                }
                else if (object < 0x100) {
                    // uint 8
                    this.writeU8(0xcc);
                    this.writeU8(object);
                }
                else if (object < 0x10000) {
                    // uint 16
                    this.writeU8(0xcd);
                    this.writeU16(object);
                }
                else if (object < 0x100000000) {
                    // uint 32
                    this.writeU8(0xce);
                    this.writeU32(object);
                }
                else {
                    // uint 64
                    this.writeU8(0xcf);
                    this.writeU64(object);
                }
            }
            else {
                if (object >= -0x20) {
                    // negative fixint
                    this.writeU8(0xe0 | (object + 0x20));
                }
                else if (object >= -0x80) {
                    // int 8
                    this.writeU8(0xd0);
                    this.writeI8(object);
                }
                else if (object >= -0x8000) {
                    // int 16
                    this.writeU8(0xd1);
                    this.writeI16(object);
                }
                else if (object >= -0x80000000) {
                    // int 32
                    this.writeU8(0xd2);
                    this.writeI32(object);
                }
                else {
                    // int 64
                    this.writeU8(0xd3);
                    this.writeI64(object);
                }
            }
        }
        else {
            // non-integer numbers
            if (this.forceFloat32) {
                // float 32
                this.writeU8(0xca);
                this.writeF32(object);
            }
            else {
                // float 64
                this.writeU8(0xcb);
                this.writeF64(object);
            }
        }
    };
    Encoder.prototype.writeStringHeader = function (byteLength) {
        if (byteLength < 32) {
            // fixstr
            this.writeU8(0xa0 + byteLength);
        }
        else if (byteLength < 0x100) {
            // str 8
            this.writeU8(0xd9);
            this.writeU8(byteLength);
        }
        else if (byteLength < 0x10000) {
            // str 16
            this.writeU8(0xda);
            this.writeU16(byteLength);
        }
        else if (byteLength < 0x100000000) {
            // str 32
            this.writeU8(0xdb);
            this.writeU32(byteLength);
        }
        else {
            throw new Error("Too long string: " + byteLength + " bytes in UTF-8");
        }
    };
    Encoder.prototype.encodeString = function (object) {
        var maxHeaderSize = 1 + 4;
        var strLength = object.length;
        if (strLength > TEXT_ENCODER_THRESHOLD) {
            var byteLength = utf8Count(object);
            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
            this.writeStringHeader(byteLength);
            utf8EncodeTE(object, this.bytes, this.pos);
            this.pos += byteLength;
        }
        else {
            var byteLength = utf8Count(object);
            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
            this.writeStringHeader(byteLength);
            utf8EncodeJs(object, this.bytes, this.pos);
            this.pos += byteLength;
        }
    };
    Encoder.prototype.encodeObject = function (object, depth) {
        // try to encode objects with custom codec first of non-primitives
        var ext = this.extensionCodec.tryToEncode(object, this.context);
        if (ext != null) {
            this.encodeExtension(ext);
        }
        else if (Array.isArray(object)) {
            this.encodeArray(object, depth);
        }
        else if (ArrayBuffer.isView(object)) {
            this.encodeBinary(object);
        }
        else if (typeof object === "object") {
            this.encodeMap(object, depth);
        }
        else {
            // symbol, function and other special object come here unless extensionCodec handles them.
            throw new Error("Unrecognized object: " + Object.prototype.toString.apply(object));
        }
    };
    Encoder.prototype.encodeBinary = function (object) {
        var size = object.byteLength;
        if (size < 0x100) {
            // bin 8
            this.writeU8(0xc4);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // bin 16
            this.writeU8(0xc5);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // bin 32
            this.writeU8(0xc6);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large binary: " + size);
        }
        var bytes = ensureUint8Array(object);
        this.writeU8a(bytes);
    };
    Encoder.prototype.encodeArray = function (object, depth) {
        var size = object.length;
        if (size < 16) {
            // fixarray
            this.writeU8(0x90 + size);
        }
        else if (size < 0x10000) {
            // array 16
            this.writeU8(0xdc);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // array 32
            this.writeU8(0xdd);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large array: " + size);
        }
        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
            var item = object_1[_i];
            this.doEncode(item, depth + 1);
        }
    };
    Encoder.prototype.countWithoutUndefined = function (object, keys) {
        var count = 0;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (object[key] !== undefined) {
                count++;
            }
        }
        return count;
    };
    Encoder.prototype.encodeMap = function (object, depth) {
        var keys = Object.keys(object);
        if (this.sortKeys) {
            keys.sort();
        }
        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
        if (size < 16) {
            // fixmap
            this.writeU8(0x80 + size);
        }
        else if (size < 0x10000) {
            // map 16
            this.writeU8(0xde);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // map 32
            this.writeU8(0xdf);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large map object: " + size);
        }
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            var value = object[key];
            if (!(this.ignoreUndefined && value === undefined)) {
                this.encodeString(key);
                this.doEncode(value, depth + 1);
            }
        }
    };
    Encoder.prototype.encodeExtension = function (ext) {
        var size = ext.data.length;
        if (size === 1) {
            // fixext 1
            this.writeU8(0xd4);
        }
        else if (size === 2) {
            // fixext 2
            this.writeU8(0xd5);
        }
        else if (size === 4) {
            // fixext 4
            this.writeU8(0xd6);
        }
        else if (size === 8) {
            // fixext 8
            this.writeU8(0xd7);
        }
        else if (size === 16) {
            // fixext 16
            this.writeU8(0xd8);
        }
        else if (size < 0x100) {
            // ext 8
            this.writeU8(0xc7);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // ext 16
            this.writeU8(0xc8);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // ext 32
            this.writeU8(0xc9);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large extension object: " + size);
        }
        this.writeI8(ext.type);
        this.writeU8a(ext.data);
    };
    Encoder.prototype.writeU8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setUint8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU8a = function (values) {
        var size = values.length;
        this.ensureBufferSizeToWrite(size);
        this.bytes.set(values, this.pos);
        this.pos += size;
    };
    Encoder.prototype.writeI8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setInt8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setUint16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeI16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setInt16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeU32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setUint32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeI32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setInt32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setFloat32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setFloat64(this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeU64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        setUint64(this.view, this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeI64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        setInt64(this.view, this.pos, value);
        this.pos += 8;
    };
    return Encoder;
}());

//# sourceMappingURL=Encoder.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/encode.mjs

var defaultEncodeOptions = {};
/**
 * It encodes `value` in the MessagePack format and
 * returns a byte buffer.
 *
 * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.
 */
function encode(value, options) {
    if (options === void 0) { options = defaultEncodeOptions; }
    var encoder = new Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);
    return encoder.encode(value);
}
//# sourceMappingURL=encode.mjs.map
;// CONCATENATED MODULE: ./src/utils/common.ts
var common_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var common_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var common_generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/** 生成 Guid */
function Guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}
/** 生成 Guid */
function GuidMini() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4());
}
/** 打印 */
function print(message) {
    console.log(message);
}
/**
 * 序列化消息
 * @param message 消息
 * @returns Uint8Array
 */
function ToMessagePackBuffer(message) {
    return encode(message);
}
/** IM异常 */
var ImException = /** @class */ (function (_super) {
    common_extends(ImException, _super);
    function ImException(message, status) {
        if (status === void 0) { status = 0; }
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.status = status;
        return _this;
    }
    ImException.prototype.toString = function () {
        return "IM Error [" + this.status + "] : $message";
    };
    return ImException;
}(Error));

/** Http 请求帮助类 */
var http = /** @class */ (function () {
    function http() {
    }
    /**
     * get 请求方法
     * @param url url
     * @param headers 请求头
     * @returns
     */
    http.get = function (url, headers) {
        return common_awaiter(this, void 0, void 0, function () {
            var _headers, response;
            return common_generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _headers = new Headers();
                        _headers.append("Accept", "application/json");
                        headers === null || headers === void 0 ? void 0 : headers.forEach(function (val, key, map) { _headers.append(key, val); });
                        return [4 /*yield*/, fetch(url, { method: "GET", mode: "cors", headers: _headers, credentials: "omit" })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * post 请求
     * @param url url
     * @param headers 请求头
     * @param body 请求参数
     * @returns
     */
    http.post = function (url, headers, body) {
        return common_awaiter(this, void 0, void 0, function () {
            var _headers, response;
            return common_generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _headers = new Headers();
                        _headers.append("Accept", "application/json");
                        _headers.append('Content-Type', 'application/json');
                        headers === null || headers === void 0 ? void 0 : headers.forEach(function (val, key, map) { _headers.append(key, val); });
                        return [4 /*yield*/, fetch(url, { method: "POST", mode: "cors", headers: _headers, credentials: "omit", body: JSON.stringify(body) })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return http;
}());


;// CONCATENATED MODULE: ./src/models/messages.ts
var messages_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/** 消息基础结构。
 * 所有消息都需要阅读回执
 */
var MessageBase = /** @class */ (function () {
    function MessageBase(messageType, referenceId, sourceId, createTime, changeTime, type, content, fileId, customContent, customType, isOffline) {
        this.MessageType = messageType;
        this.ReferenceId = referenceId;
        this.SourceId = sourceId;
        this.CreateTime = createTime;
        this.ChangeTime = changeTime;
        this.Type = type;
        this.Content = content;
        this.FileId = fileId;
        this.CustomContent = customContent;
        this.CustomType = customType;
        this.IsOffline = isOffline;
    }
    /**初始化指定的消息 */
    MessageBase.fromMap = function (map) {
        var _a;
        if (typeof map == 'string') {
            map = JSON.parse(map);
        }
        var messageType = (_a = map['messageType']) !== null && _a !== void 0 ? _a : map['MessageType'];
        if (messageType == MessageTypeEnum.Normal) {
            return NormalMessage.fromMap(map);
        }
        if (messageType == MessageTypeEnum.Group) {
            return GroupMessage.fromMap(map);
        }
        else {
            throw new ImException("不是指定的消息类型");
        }
    };
    return MessageBase;
}());

/** 普通消息 */
var NormalMessage = /** @class */ (function (_super) {
    messages_extends(NormalMessage, _super);
    function NormalMessage(id, targetId, status, referenceId, sourceId, createTime, changeTime, type, content, fileId, customContent, customType, isOffline) {
        var _this = _super.call(this, MessageTypeEnum.Normal, referenceId !== null && referenceId !== void 0 ? referenceId : 0, sourceId !== null && sourceId !== void 0 ? sourceId : 0, createTime !== null && createTime !== void 0 ? createTime : 0, changeTime !== null && changeTime !== void 0 ? changeTime : 0, type !== null && type !== void 0 ? type : ContentType.Text, content !== null && content !== void 0 ? content : '', fileId !== null && fileId !== void 0 ? fileId : 0, customContent !== null && customContent !== void 0 ? customContent : '', customType !== null && customType !== void 0 ? customType : '', isOffline !== null && isOffline !== void 0 ? isOffline : false) || this;
        _this.Id = id !== null && id !== void 0 ? id : 0;
        _this.TargetId = targetId !== null && targetId !== void 0 ? targetId : 0;
        _this.Status = status !== null && status !== void 0 ? status : StatusType.UnRead;
        return _this;
    }
    NormalMessage.fromMap = function (map) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (typeof map == 'string') {
            map = JSON.parse(map);
        }
        return new NormalMessage((_a = map['id']) !== null && _a !== void 0 ? _a : map['Id'], (_b = map['targetId']) !== null && _b !== void 0 ? _b : map['TargetId'], (_c = map['status']) !== null && _c !== void 0 ? _c : map['Status'], (_d = map['referenceId']) !== null && _d !== void 0 ? _d : map['ReferenceId'], (_e = map['sourceId']) !== null && _e !== void 0 ? _e : map['SourceId'], (_f = map['createTime']) !== null && _f !== void 0 ? _f : map['CreateTime'], (_g = map['thangeTime']) !== null && _g !== void 0 ? _g : map['ChangeTime'], (_h = map['cype']) !== null && _h !== void 0 ? _h : map['Type'], (_j = map['fontent']) !== null && _j !== void 0 ? _j : map['Content'], (_k = map['fileId']) !== null && _k !== void 0 ? _k : map['FileId'], (_l = map['customContent']) !== null && _l !== void 0 ? _l : map['CustomContent'], (_m = map['customType']) !== null && _m !== void 0 ? _m : map['CustomType'], (_o = map['isOffline']) !== null && _o !== void 0 ? _o : map['IsOffline']);
    };
    return NormalMessage;
}(MessageBase));

/** 群组消息 */
var GroupMessage = /** @class */ (function (_super) {
    messages_extends(GroupMessage, _super);
    function GroupMessage(id, groupId, atUsers, sharpUsers, referenceId, sourceId, createTime, changeTime, type, content, fileId, customContent, customType, isOffline) {
        var _this = _super.call(this, MessageTypeEnum.Group, referenceId !== null && referenceId !== void 0 ? referenceId : 0, sourceId !== null && sourceId !== void 0 ? sourceId : 0, createTime !== null && createTime !== void 0 ? createTime : 0, changeTime !== null && changeTime !== void 0 ? changeTime : 0, type !== null && type !== void 0 ? type : ContentType.Text, content !== null && content !== void 0 ? content : '', fileId !== null && fileId !== void 0 ? fileId : 0, customContent !== null && customContent !== void 0 ? customContent : '', customType !== null && customType !== void 0 ? customType : '', isOffline !== null && isOffline !== void 0 ? isOffline : false) || this;
        _this.Id = id !== null && id !== void 0 ? id : 0;
        _this.GroupId = groupId !== null && groupId !== void 0 ? groupId : 0;
        _this.AtUsers = atUsers !== null && atUsers !== void 0 ? atUsers : new Array();
        _this.SharpUsers = sharpUsers !== null && sharpUsers !== void 0 ? sharpUsers : new Array();
        return _this;
    }
    GroupMessage.fromMap = function (map) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        if (typeof map == 'string') {
            map = JSON.parse(map);
        }
        return new GroupMessage((_a = map['id']) !== null && _a !== void 0 ? _a : map['Id'], (_b = map['groupId']) !== null && _b !== void 0 ? _b : map['GroupId'], (_c = map['atUsers']) !== null && _c !== void 0 ? _c : map['AtUsers'], (_d = map['sharpUsers']) !== null && _d !== void 0 ? _d : map['SharpUsers'], (_e = map['referenceId']) !== null && _e !== void 0 ? _e : map['ReferenceId'], (_f = map['sourceId']) !== null && _f !== void 0 ? _f : map['SourceId'], (_g = map['createTime']) !== null && _g !== void 0 ? _g : map['CreateTime'], (_h = map['changeTime']) !== null && _h !== void 0 ? _h : map['ChangeTime'], (_j = map['type']) !== null && _j !== void 0 ? _j : map['Type'], (_k = map['content']) !== null && _k !== void 0 ? _k : map['Content'], (_l = map['fileId']) !== null && _l !== void 0 ? _l : map['FileId'], (_m = map['customContent']) !== null && _m !== void 0 ? _m : map['CustomContent'], (_o = map['customType']) !== null && _o !== void 0 ? _o : map['CustomType'], (_p = map['isOffline']) !== null && _p !== void 0 ? _p : map['IsOffline']);
    };
    return GroupMessage;
}(MessageBase));


;// CONCATENATED MODULE: ./src/utils/extensions.string.ts

// docs 时暂时取消下面的注释
// import "./extensions"
var _map = new Map([
    ['.323', 'text/h323'],
    ['.aaf', 'application/octet-stream'],
    ['.aca', 'application/octet-stream'],
    ['.accdb', 'application/msaccess'],
    ['.accde', 'application/msaccess'],
    ['.accdt', 'application/msaccess'],
    ['.acx', 'application/internet-property-stream'],
    ['.afm', 'application/octet-stream'],
    ['.ai', 'application/postscript'],
    ['.aif', 'audio/x-aiff'],
    ['.aifc', 'audio/aiff'],
    ['.aiff', 'audio/aiff'],
    ['.application', 'application/x-ms-application'],
    ['.art', 'image/x-jg'],
    ['.asd', 'application/octet-stream'],
    ['.asf', 'video/x-ms-asf'],
    ['.asi', 'application/octet-stream'],
    ['.asm', 'text/plain'],
    ['.asr', 'video/x-ms-asf'],
    ['.asx', 'video/x-ms-asf'],
    ['.atom', 'application/atom+xml'],
    ['.au', 'audio/basic'],
    ['.avi', 'video/x-msvideo'],
    ['.axs', 'application/olescript'],
    ['.bas', 'text/plain'],
    ['.bcpio', 'application/x-bcpio'],
    ['.bin', 'application/octet-stream'],
    ['.bmp', 'image/bmp'],
    ['.c', 'text/plain'],
    ['.cab', 'application/octet-stream'],
    ['.calx', 'application/vnd.ms-office.calx'],
    ['.cat', 'application/vnd.ms-pki.seccat'],
    ['.cdf', 'application/x-cdf'],
    ['.chm', 'application/octet-stream'],
    ['.class', 'application/x-java-applet'],
    ['.clp', 'application/x-msclip'],
    ['.cmx', 'image/x-cmx'],
    ['.cnf', 'text/plain'],
    ['.cod', 'image/cis-cod'],
    ['.cpio', 'application/x-cpio'],
    ['.cpp', 'text/plain'],
    ['.crd', 'application/x-mscardfile'],
    ['.crl', 'application/pkix-crl'],
    ['.crt', 'application/x-x509-ca-cert'],
    ['.csh', 'application/x-csh'],
    ['.css', 'text/css'],
    ['.csv', 'application/octet-stream'],
    ['.cur', 'application/octet-stream'],
    ['.dcr', 'application/x-director'],
    ['.deploy', 'application/octet-stream'],
    ['.der', 'application/x-x509-ca-cert'],
    ['.dib', 'image/bmp'],
    ['.dir', 'application/x-director'],
    ['.disco', 'text/xml'],
    ['.dll', 'application/x-msdownload'],
    ['.config', 'text/xml'],
    ['.dlm', 'text/dlm'],
    ['.doc', 'application/msword'],
    ['.docm', 'application/vnd.ms-word.document.macroEnabled.12'],
    ['.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
    ['.dot', 'application/msword'],
    ['.dotm', 'application/vnd.ms-word.template.macroEnabled.12'],
    ['.dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template'],
    ['.dsp', 'application/octet-stream'],
    ['.dtd', 'text/xml'],
    ['.dvi', 'application/x-dvi'],
    ['.dwf', 'drawing/x-dwf'],
    ['.dwp', 'application/octet-stream'],
    ['.dxr', 'application/x-director'],
    ['.eml', 'message/rfc822'],
    ['.emz', 'application/octet-stream'],
    ['.eot', 'application/octet-stream'],
    ['.eps', 'application/postscript'],
    ['.etx', 'text/x-setext'],
    ['.evy', 'application/envoy'],
    ['.exe', 'application/octet-stream'],
    ['.fdf', 'application/vnd.fdf'],
    ['.fif', 'application/fractals'],
    ['.fla', 'application/octet-stream'],
    ['.flr', 'x-world/x-vrml'],
    ['.flv', 'video/x-flv'],
    ['.gif', 'image/gif'],
    ['.gtar', 'application/x-gtar'],
    ['.gz', 'application/x-gzip'],
    ['.h', 'text/plain'],
    ['.hdf', 'application/x-hdf'],
    ['.hdml', 'text/x-hdml'],
    ['.hhc', 'application/x-oleobject'],
    ['.hhk', 'application/octet-stream'],
    ['.hhp', 'application/octet-stream'],
    ['.hlp', 'application/winhlp'],
    ['.hqx', 'application/mac-binhex40'],
    ['.hta', 'application/hta'],
    ['.htc', 'text/x-component'],
    ['.htm', 'text/html'],
    ['.html', 'text/html'],
    ['.htt', 'text/webviewhtml'],
    ['.hxt', 'text/html'],
    ['.ico', 'image/x-icon'],
    ['.ics', 'application/octet-stream'],
    ['.ief', 'image/ief'],
    ['.iii', 'application/x-iphone'],
    ['.inf', 'application/octet-stream'],
    ['.ins', 'application/x-internet-signup'],
    ['.isp', 'application/x-internet-signup'],
    ['.IVF', 'video/x-ivf'],
    ['.jar', 'application/java-archive'],
    ['.java', 'application/octet-stream'],
    ['.jck', 'application/liquidmotion'],
    ['.jcz', 'application/liquidmotion'],
    ['.jfif', 'image/pjpeg'],
    ['.jpb', 'application/octet-stream'],
    ['.jpe', 'image/jpeg'],
    ['.jpeg', 'image/jpeg'],
    ['.jpg', 'image/jpeg'],
    ['.js', 'application/x-javascript'],
    ['.jsx', 'text/jscript'],
    ['.latex', 'application/x-latex'],
    ['.lit', 'application/x-ms-reader'],
    ['.lpk', 'application/octet-stream'],
    ['.lsf', 'video/x-la-asf'],
    ['.lsx', 'video/x-la-asf'],
    ['.lzh', 'application/octet-stream'],
    ['.m13', 'application/x-msmediaview'],
    ['.m14', 'application/x-msmediaview'],
    ['.m1v', 'video/mpeg'],
    ['.m3u', 'audio/x-mpegurl'],
    ['.man', 'application/x-troff-man'],
    ['.manifest', 'application/x-ms-manifest'],
    ['.map', 'text/plain'],
    ['.mdb', 'application/x-msaccess'],
    ['.mdp', 'application/octet-stream'],
    ['.me', 'application/x-troff-me'],
    ['.mht', 'message/rfc822'],
    ['.mhtml', 'message/rfc822'],
    ['.mid', 'audio/mid'],
    ['.midi', 'audio/mid'],
    ['.mix', 'application/octet-stream'],
    ['.mmf', 'application/x-smaf'],
    ['.mno', 'text/xml'],
    ['.mny', 'application/x-msmoney'],
    ['.mov', 'video/quicktime'],
    ['.movie', 'video/x-sgi-movie'],
    ['.mp2', 'video/mpeg'],
    ['.mp3', 'audio/mpeg'],
    ['.mpa', 'video/mpeg'],
    ['.mpe', 'video/mpeg'],
    ['.mpeg', 'video/mpeg'],
    ['.mpg', 'video/mpeg'],
    ['.mpp', 'application/vnd.ms-project'],
    ['.mpv2', 'video/mpeg'],
    ['.ms', 'application/x-troff-ms'],
    ['.msi', 'application/octet-stream'],
    ['.mso', 'application/octet-stream'],
    ['.mvb', 'application/x-msmediaview'],
    ['.mvc', 'application/x-miva-compiled'],
    ['.nc', 'application/x-netcdf'],
    ['.nsc', 'video/x-ms-asf'],
    ['.nws', 'message/rfc822'],
    ['.ocx', 'application/octet-stream'],
    ['.oda', 'application/oda'],
    ['.odc', 'text/x-ms-odc'],
    ['.ods', 'application/oleobject'],
    ['.one', 'application/onenote'],
    ['.onea', 'application/onenote'],
    ['.onetoc', 'application/onenote'],
    ['.onetoc2', 'application/onenote'],
    ['.onetmp', 'application/onenote'],
    ['.onepkg', 'application/onenote'],
    ['.osdx', 'application/opensearchdescription+xml'],
    ['.p10', 'application/pkcs10'],
    ['.p12', 'application/x-pkcs12'],
    ['.p7b', 'application/x-pkcs7-certificates'],
    ['.p7c', 'application/pkcs7-mime'],
    ['.p7m', 'application/pkcs7-mime'],
    ['.p7r', 'application/x-pkcs7-certreqresp'],
    ['.p7s', 'application/pkcs7-signature'],
    ['.pbm', 'image/x-portable-bitmap'],
    ['.pcx', 'application/octet-stream'],
    ['.pcz', 'application/octet-stream'],
    ['.pdf', 'application/pdf'],
    ['.pfb', 'application/octet-stream'],
    ['.pfm', 'application/octet-stream'],
    ['.pfx', 'application/x-pkcs12'],
    ['.pgm', 'image/x-portable-graymap'],
    ['.pko', 'application/vnd.ms-pki.pko'],
    ['.pma', 'application/x-perfmon'],
    ['.pmc', 'application/x-perfmon'],
    ['.pml', 'application/x-perfmon'],
    ['.pmr', 'application/x-perfmon'],
    ['.pmw', 'application/x-perfmon'],
    ['.png', 'image/png'],
    ['.pnm', 'image/x-portable-anymap'],
    ['.pnz', 'image/png'],
    ['.pot', 'application/vnd.ms-powerpoint'],
    ['.potm', 'application/vnd.ms-powerpoint.template.macroEnabled.12'],
    ['.potx', 'application/vnd.openxmlformats-officedocument.presentationml.template'],
    ['.ppam', 'application/vnd.ms-powerpoint.addin.macroEnabled.12'],
    ['.ppm', 'image/x-portable-pixmap'],
    ['.pps', 'application/vnd.ms-powerpoint'],
    ['.ppsm', 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'],
    ['.ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow'],
    ['.ppt', 'application/vnd.ms-powerpoint'],
    ['.pptm', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12'],
    ['.pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],
    ['.prf', 'application/pics-rules'],
    ['.prm', 'application/octet-stream'],
    ['.prx', 'application/octet-stream'],
    ['.ps', 'application/postscript'],
    ['.psd', 'application/octet-stream'],
    ['.psm', 'application/octet-stream'],
    ['.psp', 'application/octet-stream'],
    ['.pub', 'application/x-mspublisher'],
    ['.qt', 'video/quicktime'],
    ['.qtl', 'application/x-quicktimeplayer'],
    ['.qxd', 'application/octet-stream'],
    ['.ra', 'audio/x-pn-realaudio'],
    ['.ram', 'audio/x-pn-realaudio'],
    ['.rar', 'application/octet-stream'],
    ['.ras', 'image/x-cmu-raster'],
    ['.rf', 'image/vnd.rn-realflash'],
    ['.rgb', 'image/x-rgb'],
    ['.rm', 'application/vnd.rn-realmedia'],
    ['.rmi', 'audio/mid'],
    ['.roff', 'application/x-troff'],
    ['.rpm', 'audio/x-pn-realaudio-plugin'],
    ['.rtf', 'application/rtf'],
    ['.rtx', 'text/richtext'],
    ['.scd', 'application/x-msschedule'],
    ['.sct', 'text/scriptlet'],
    ['.sea', 'application/octet-stream'],
    ['.setpay', 'application/set-payment-initiation'],
    ['.setreg', 'application/set-registration-initiation'],
    ['.sgml', 'text/sgml'],
    ['.sh', 'application/x-sh'],
    ['.shar', 'application/x-shar'],
    ['.sit', 'application/x-stuffit'],
    ['.sldm', 'application/vnd.ms-powerpoint.slide.macroEnabled.12'],
    ['.sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide'],
    ['.smd', 'audio/x-smd'],
    ['.smi', 'application/octet-stream'],
    ['.smx', 'audio/x-smd'],
    ['.smz', 'audio/x-smd'],
    ['.snd', 'audio/basic'],
    ['.snp', 'application/octet-stream'],
    ['.spc', 'application/x-pkcs7-certificates'],
    ['.spl', 'application/futuresplash'],
    ['.src', 'application/x-wais-source'],
    ['.ssm', 'application/streamingmedia'],
    ['.sst', 'application/vnd.ms-pki.certstore'],
    ['.stl', 'application/vnd.ms-pki.stl'],
    ['.sv4cpio', 'application/x-sv4cpio'],
    ['.sv4crc', 'application/x-sv4crc'],
    ['.swf', 'application/x-shockwave-flash'],
    ['.t', 'application/x-troff'],
    ['.tar', 'application/x-tar'],
    ['.tcl', 'application/x-tcl'],
    ['.tex', 'application/x-tex'],
    ['.texi', 'application/x-texinfo'],
    ['.texinfo', 'application/x-texinfo'],
    ['.tgz', 'application/x-compressed'],
    ['.thmx', 'application/vnd.ms-officetheme'],
    ['.thn', 'application/octet-stream'],
    ['.tif', 'image/tiff'],
    ['.tiff', 'image/tiff'],
    ['.toc', 'application/octet-stream'],
    ['.tr', 'application/x-troff'],
    ['.trm', 'application/x-msterminal'],
    ['.tsv', 'text/tab-separated-values'],
    ['.ttf', 'application/octet-stream'],
    ['.txt', 'text/plain'],
    ['.u32', 'application/octet-stream'],
    ['.uls', 'text/iuls'],
    ['.ustar', 'application/x-ustar'],
    ['.vbs', 'text/vbscript'],
    ['.vcf', 'text/x-vcard'],
    ['.vcs', 'text/plain'],
    ['.vdx', 'application/vnd.ms-visio.viewer'],
    ['.vml', 'text/xml'],
    ['.vsd', 'application/vnd.visio'],
    ['.vss', 'application/vnd.visio'],
    ['.vst', 'application/vnd.visio'],
    ['.vsto', 'application/x-ms-vsto'],
    ['.vsw', 'application/vnd.visio'],
    ['.vsx', 'application/vnd.visio'],
    ['.vtx', 'application/vnd.visio'],
    ['.wav', 'audio/wav'],
    ['.wax', 'audio/x-ms-wax'],
    ['.wbmp', 'image/vnd.wap.wbmp'],
    ['.wcm', 'application/vnd.ms-works'],
    ['.wdb', 'application/vnd.ms-works'],
    ['.wks', 'application/vnd.ms-works'],
    ['.wm', 'video/x-ms-wm'],
    ['.wma', 'audio/x-ms-wma'],
    ['.wmd', 'application/x-ms-wmd'],
    ['.wmf', 'application/x-msmetafile'],
    ['.wml', 'text/vnd.wap.wml'],
    ['.wmlc', 'application/vnd.wap.wmlc'],
    ['.wmls', 'text/vnd.wap.wmlscript'],
    ['.wmlsc', 'application/vnd.wap.wmlscriptc'],
    ['.wmp', 'video/x-ms-wmp'],
    ['.wmv', 'video/x-ms-wmv'],
    ['.wmx', 'video/x-ms-wmx'],
    ['.wmz', 'application/x-ms-wmz'],
    ['.wps', 'application/vnd.ms-works'],
    ['.wri', 'application/x-mswrite'],
    ['.wrl', 'x-world/x-vrml'],
    ['.wrz', 'x-world/x-vrml'],
    ['.wsdl', 'text/xml'],
    ['.wvx', 'video/x-ms-wvx'],
    ['.x', 'application/directx'],
    ['.xaf', 'x-world/x-vrml'],
    ['.xaml', 'application/xaml+xml'],
    ['.xap', 'application/x-silverlight-app'],
    ['.xbap', 'application/x-ms-xbap'],
    ['.xbm', 'image/x-xbitmap'],
    ['.xdr', 'text/plain'],
    ['.xla', 'application/vnd.ms-excel'],
    ['.xlam', 'application/vnd.ms-excel.addin.macroEnabled.12'],
    ['.xlc', 'application/vnd.ms-excel'],
    ['.xlm', 'application/vnd.ms-excel'],
    ['.xls', 'application/vnd.ms-excel'],
    ['.xlsb', 'application/vnd.ms-excel.sheet.binary.macroEnabled.12'],
    ['.xlsm', 'application/vnd.ms-excel.sheet.macroEnabled.12'],
    ['.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
    ['.xlt', 'application/vnd.ms-excel'],
    ['.xltm', 'application/vnd.ms-excel.template.macroEnabled.12'],
    ['.xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template'],
    ['.xlw', 'application/vnd.ms-excel'],
    ['.xml', 'text/xml'],
    ['.xof', 'x-world/x-vrml'],
    ['.xpm', 'image/x-xpixmap'],
    ['.xps', 'application/vnd.ms-xpsdocument'],
    ['.xsd', 'text/xml'],
    ['.xsf', 'text/xml'],
    ['.xsl', 'text/xml'],
    ['.xslt', 'text/xml'],
    ['.xsn', 'application/octet-stream'],
    ['.xtp', 'application/octet-stream'],
    ['.xwd', 'image/x-xwindowdump'],
    ['.z', 'application/x-compress'],
    ['.zip', 'application/x-zip-compressed'],
]);
var _exts = [
    '.accdb',
    '.aiff',
    '.asf',
    '.asx',
    '.au',
    '.avi',
    '.bin',
    '.bmp',
    '.cab',
    '.cat',
    '.chm',
    '.class',
    '.cmx',
    '.cod',
    '.csh',
    '.cur',
    '.dib',
    '.dll',
    '.doc',
    '.docx',
    '.dot',
    '.dsp',
    '.dtd',
    '.eml',
    '.eps',
    '.exe',
    '.fdf',
    '.flv',
    '.gif',
    '.gz',
    '.hlp',
    '.hqx',
    '.ico',
    '.jar',
    '.jfif',
    '.jpe',
    '.jpeg',
    '.jpg',
    '.lit',
    '.lzh',
    '.manifest',
    '.mdb',
    '.mid',
    '.midi',
    '.mmf',
    '.mny',
    '.mov',
    '.mp3',
    '.mpg',
    '.msi',
    '.ocx',
    '.one',
    '.p10',
    '.pcx',
    '.pdf',
    '.pgm',
    '.png',
    '.pps',
    '.ppt',
    '.pptx',
    '.psd',
    '.psp',
    '.pub',
    '.qxd',
    '.ra',
    '.ram',
    '.rar',
    '.rgb',
    '.rm',
    '.rmi',
    '.rpm',
    '.rtf',
    '.sit',
    '.snp',
    '.spl',
    '.swf',
    '.tar',
    '.tif',
    '.tiff',
    '.vcf',
    '.vsd',
    '.wav',
    '.wks',
    '.wma',
    '.wmf',
    '.wmv',
    '.wmz',
    '.wps',
    '.wri',
    '.xdr',
    '.xla',
    '.xls',
    '.xlsx',
    '.xml',
    '.xps',
    '.zip'
];
/** 字符串扩展方法 */
String.prototype.format = function (args, removePlacehold) {
    var _a, _b;
    removePlacehold = removePlacehold !== null && removePlacehold !== void 0 ? removePlacehold : true;
    var list = this.split(RegExp('(\{[0-9]+\})*'));
    var res = '';
    for (var i = 0; i < list.length - 1; i++) {
        res += list[i];
        if (i < ((_a = args === null || args === void 0 ? void 0 : args.length) !== null && _a !== void 0 ? _a : 0)) {
            res += (_b = args[i]) !== null && _b !== void 0 ? _b : '';
        }
        else if (!removePlacehold) {
            res += '{$i}';
        }
    }
    return res;
};
/** 文件名转换成 Content-Type */
String.prototype.toContentType = function toContentType() {
    var _a;
    var index = this.lastIndexOf('.');
    var ext = this.substring(index);
    return (_a = _map.get(ext)) !== null && _a !== void 0 ? _a : '';
};
/** 指定的文件名是否是允许上传的类型 */
String.prototype.isAllowExtension = function isAllowExtension() {
    var index = this.lastIndexOf('.');
    var ext = this.substring(index);
    return _exts.includes(ext);
};

;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/utils/prettyByte.mjs
function prettyByte(byte) {
    return (byte < 0 ? "-" : "") + "0x" + Math.abs(byte).toString(16).padStart(2, "0");
}
//# sourceMappingURL=prettyByte.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/CachedKeyDecoder.mjs

var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = /** @class */ (function () {
    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {
        if (maxKeyLength === void 0) { maxKeyLength = DEFAULT_MAX_KEY_LENGTH; }
        if (maxLengthPerKey === void 0) { maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY; }
        this.maxKeyLength = maxKeyLength;
        this.maxLengthPerKey = maxLengthPerKey;
        this.hit = 0;
        this.miss = 0;
        // avoid `new Array(N)`, which makes a sparse array,
        // because a sparse array is typically slower than a non-sparse array.
        this.caches = [];
        for (var i = 0; i < this.maxKeyLength; i++) {
            this.caches.push([]);
        }
    }
    CachedKeyDecoder.prototype.canBeCached = function (byteLength) {
        return byteLength > 0 && byteLength <= this.maxKeyLength;
    };
    CachedKeyDecoder.prototype.find = function (bytes, inputOffset, byteLength) {
        var records = this.caches[byteLength - 1];
        FIND_CHUNK: for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {
            var record = records_1[_i];
            var recordBytes = record.bytes;
            for (var j = 0; j < byteLength; j++) {
                if (recordBytes[j] !== bytes[inputOffset + j]) {
                    continue FIND_CHUNK;
                }
            }
            return record.str;
        }
        return null;
    };
    CachedKeyDecoder.prototype.store = function (bytes, value) {
        var records = this.caches[bytes.length - 1];
        var record = { bytes: bytes, str: value };
        if (records.length >= this.maxLengthPerKey) {
            // `records` are full!
            // Set `record` to an arbitrary position.
            records[(Math.random() * records.length) | 0] = record;
        }
        else {
            records.push(record);
        }
    };
    CachedKeyDecoder.prototype.decode = function (bytes, inputOffset, byteLength) {
        var cachedValue = this.find(bytes, inputOffset, byteLength);
        if (cachedValue != null) {
            this.hit++;
            return cachedValue;
        }
        this.miss++;
        var str = utf8DecodeJs(bytes, inputOffset, byteLength);
        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.
        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
        this.store(slicedCopyOfBytes, str);
        return str;
    };
    return CachedKeyDecoder;
}());

//# sourceMappingURL=CachedKeyDecoder.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/Decoder.mjs
var Decoder_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Decoder_generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (undefined && undefined.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};







var isValidMapKeyType = function (key) {
    var keyType = typeof key;
    return keyType === "string" || keyType === "number";
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
// IE11: Hack to support IE11.
// IE11: Drop this hack and just use RangeError when IE11 is obsolete.
var DataViewIndexOutOfBoundsError = (function () {
    try {
        // IE11: The spec says it should throw RangeError,
        // IE11: but in IE11 it throws TypeError.
        EMPTY_VIEW.getInt8(0);
    }
    catch (e) {
        return e.constructor;
    }
    throw new Error("never reached");
})();
var MORE_DATA = new DataViewIndexOutOfBoundsError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder_Decoder = /** @class */ (function () {
    function Decoder(extensionCodec, context, maxStrLength, maxBinLength, maxArrayLength, maxMapLength, maxExtLength, keyDecoder) {
        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }
        if (context === void 0) { context = undefined; }
        if (maxStrLength === void 0) { maxStrLength = UINT32_MAX; }
        if (maxBinLength === void 0) { maxBinLength = UINT32_MAX; }
        if (maxArrayLength === void 0) { maxArrayLength = UINT32_MAX; }
        if (maxMapLength === void 0) { maxMapLength = UINT32_MAX; }
        if (maxExtLength === void 0) { maxExtLength = UINT32_MAX; }
        if (keyDecoder === void 0) { keyDecoder = sharedCachedKeyDecoder; }
        this.extensionCodec = extensionCodec;
        this.context = context;
        this.maxStrLength = maxStrLength;
        this.maxBinLength = maxBinLength;
        this.maxArrayLength = maxArrayLength;
        this.maxMapLength = maxMapLength;
        this.maxExtLength = maxExtLength;
        this.keyDecoder = keyDecoder;
        this.totalPos = 0;
        this.pos = 0;
        this.view = EMPTY_VIEW;
        this.bytes = EMPTY_BYTES;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.stack = [];
    }
    Decoder.prototype.reinitializeState = function () {
        this.totalPos = 0;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.stack.length = 0;
        // view, bytes, and pos will be re-initialized in setBuffer()
    };
    Decoder.prototype.setBuffer = function (buffer) {
        this.bytes = ensureUint8Array(buffer);
        this.view = createDataView(this.bytes);
        this.pos = 0;
    };
    Decoder.prototype.appendBuffer = function (buffer) {
        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
            this.setBuffer(buffer);
        }
        else {
            var remainingData = this.bytes.subarray(this.pos);
            var newData = ensureUint8Array(buffer);
            // concat remainingData + newData
            var newBuffer = new Uint8Array(remainingData.length + newData.length);
            newBuffer.set(remainingData);
            newBuffer.set(newData, remainingData.length);
            this.setBuffer(newBuffer);
        }
    };
    Decoder.prototype.hasRemaining = function (size) {
        return this.view.byteLength - this.pos >= size;
    };
    Decoder.prototype.createExtraByteError = function (posToShow) {
        var _a = this, view = _a.view, pos = _a.pos;
        return new RangeError("Extra " + (view.byteLength - pos) + " of " + view.byteLength + " byte(s) found at buffer[" + posToShow + "]");
    };
    /**
     * @throws {DecodeError}
     * @throws {RangeError}
     */
    Decoder.prototype.decode = function (buffer) {
        this.reinitializeState();
        this.setBuffer(buffer);
        var object = this.doDecodeSync();
        if (this.hasRemaining(1)) {
            throw this.createExtraByteError(this.pos);
        }
        return object;
    };
    Decoder.prototype.decodeMulti = function (buffer) {
        return Decoder_generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    this.reinitializeState();
                    this.setBuffer(buffer);
                    _a.label = 1;
                case 1:
                    if (!this.hasRemaining(1)) return [3 /*break*/, 3];
                    return [4 /*yield*/, this.doDecodeSync()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    Decoder.prototype.decodeAsync = function (stream) {
        var stream_1, stream_1_1;
        var e_1, _a;
        return Decoder_awaiter(this, void 0, void 0, function () {
            var decoded, object, buffer, e_1_1, _b, headByte, pos, totalPos;
            return Decoder_generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        decoded = false;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, 7, 12]);
                        stream_1 = __asyncValues(stream);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, stream_1.next()];
                    case 3:
                        if (!(stream_1_1 = _c.sent(), !stream_1_1.done)) return [3 /*break*/, 5];
                        buffer = stream_1_1.value;
                        if (decoded) {
                            throw this.createExtraByteError(this.totalPos);
                        }
                        this.appendBuffer(buffer);
                        try {
                            object = this.doDecodeSync();
                            decoded = true;
                        }
                        catch (e) {
                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {
                                throw e; // rethrow
                            }
                            // fallthrough
                        }
                        this.totalPos += this.pos;
                        _c.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _c.trys.push([7, , 10, 11]);
                        if (!(stream_1_1 && !stream_1_1.done && (_a = stream_1.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _a.call(stream_1)];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12:
                        if (decoded) {
                            if (this.hasRemaining(1)) {
                                throw this.createExtraByteError(this.totalPos);
                            }
                            return [2 /*return*/, object];
                        }
                        _b = this, headByte = _b.headByte, pos = _b.pos, totalPos = _b.totalPos;
                        throw new RangeError("Insufficient data in parsing " + prettyByte(headByte) + " at " + totalPos + " (" + pos + " in the current buffer)");
                }
            });
        });
    };
    Decoder.prototype.decodeArrayStream = function (stream) {
        return this.decodeMultiAsync(stream, true);
    };
    Decoder.prototype.decodeStream = function (stream) {
        return this.decodeMultiAsync(stream, false);
    };
    Decoder.prototype.decodeMultiAsync = function (stream, isArray) {
        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {
            var isArrayHeaderRequired, arrayItemsLeft, stream_2, stream_2_1, buffer, e_2, e_3_1;
            var e_3, _a;
            return Decoder_generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        isArrayHeaderRequired = isArray;
                        arrayItemsLeft = -1;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 13, 14, 19]);
                        stream_2 = __asyncValues(stream);
                        _b.label = 2;
                    case 2: return [4 /*yield*/, __await(stream_2.next())];
                    case 3:
                        if (!(stream_2_1 = _b.sent(), !stream_2_1.done)) return [3 /*break*/, 12];
                        buffer = stream_2_1.value;
                        if (isArray && arrayItemsLeft === 0) {
                            throw this.createExtraByteError(this.totalPos);
                        }
                        this.appendBuffer(buffer);
                        if (isArrayHeaderRequired) {
                            arrayItemsLeft = this.readArraySize();
                            isArrayHeaderRequired = false;
                            this.complete();
                        }
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 9, , 10]);
                        _b.label = 5;
                    case 5:
                        if (false) {}
                        return [4 /*yield*/, __await(this.doDecodeSync())];
                    case 6: return [4 /*yield*/, _b.sent()];
                    case 7:
                        _b.sent();
                        if (--arrayItemsLeft === 0) {
                            return [3 /*break*/, 8];
                        }
                        return [3 /*break*/, 5];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_2 = _b.sent();
                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {
                            throw e_2; // rethrow
                        }
                        return [3 /*break*/, 10];
                    case 10:
                        this.totalPos += this.pos;
                        _b.label = 11;
                    case 11: return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 19];
                    case 13:
                        e_3_1 = _b.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 19];
                    case 14:
                        _b.trys.push([14, , 17, 18]);
                        if (!(stream_2_1 && !stream_2_1.done && (_a = stream_2.return))) return [3 /*break*/, 16];
                        return [4 /*yield*/, __await(_a.call(stream_2))];
                    case 15:
                        _b.sent();
                        _b.label = 16;
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 18: return [7 /*endfinally*/];
                    case 19: return [2 /*return*/];
                }
            });
        });
    };
    Decoder.prototype.doDecodeSync = function () {
        DECODE: while (true) {
            var headByte = this.readHeadByte();
            var object = void 0;
            if (headByte >= 0xe0) {
                // negative fixint (111x xxxx) 0xe0 - 0xff
                object = headByte - 0x100;
            }
            else if (headByte < 0xc0) {
                if (headByte < 0x80) {
                    // positive fixint (0xxx xxxx) 0x00 - 0x7f
                    object = headByte;
                }
                else if (headByte < 0x90) {
                    // fixmap (1000 xxxx) 0x80 - 0x8f
                    var size = headByte - 0x80;
                    if (size !== 0) {
                        this.pushMapState(size);
                        this.complete();
                        continue DECODE;
                    }
                    else {
                        object = {};
                    }
                }
                else if (headByte < 0xa0) {
                    // fixarray (1001 xxxx) 0x90 - 0x9f
                    var size = headByte - 0x90;
                    if (size !== 0) {
                        this.pushArrayState(size);
                        this.complete();
                        continue DECODE;
                    }
                    else {
                        object = [];
                    }
                }
                else {
                    // fixstr (101x xxxx) 0xa0 - 0xbf
                    var byteLength = headByte - 0xa0;
                    object = this.decodeUtf8String(byteLength, 0);
                }
            }
            else if (headByte === 0xc0) {
                // nil
                object = null;
            }
            else if (headByte === 0xc2) {
                // false
                object = false;
            }
            else if (headByte === 0xc3) {
                // true
                object = true;
            }
            else if (headByte === 0xca) {
                // float 32
                object = this.readF32();
            }
            else if (headByte === 0xcb) {
                // float 64
                object = this.readF64();
            }
            else if (headByte === 0xcc) {
                // uint 8
                object = this.readU8();
            }
            else if (headByte === 0xcd) {
                // uint 16
                object = this.readU16();
            }
            else if (headByte === 0xce) {
                // uint 32
                object = this.readU32();
            }
            else if (headByte === 0xcf) {
                // uint 64
                object = this.readU64();
            }
            else if (headByte === 0xd0) {
                // int 8
                object = this.readI8();
            }
            else if (headByte === 0xd1) {
                // int 16
                object = this.readI16();
            }
            else if (headByte === 0xd2) {
                // int 32
                object = this.readI32();
            }
            else if (headByte === 0xd3) {
                // int 64
                object = this.readI64();
            }
            else if (headByte === 0xd9) {
                // str 8
                var byteLength = this.lookU8();
                object = this.decodeUtf8String(byteLength, 1);
            }
            else if (headByte === 0xda) {
                // str 16
                var byteLength = this.lookU16();
                object = this.decodeUtf8String(byteLength, 2);
            }
            else if (headByte === 0xdb) {
                // str 32
                var byteLength = this.lookU32();
                object = this.decodeUtf8String(byteLength, 4);
            }
            else if (headByte === 0xdc) {
                // array 16
                var size = this.readU16();
                if (size !== 0) {
                    this.pushArrayState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = [];
                }
            }
            else if (headByte === 0xdd) {
                // array 32
                var size = this.readU32();
                if (size !== 0) {
                    this.pushArrayState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = [];
                }
            }
            else if (headByte === 0xde) {
                // map 16
                var size = this.readU16();
                if (size !== 0) {
                    this.pushMapState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = {};
                }
            }
            else if (headByte === 0xdf) {
                // map 32
                var size = this.readU32();
                if (size !== 0) {
                    this.pushMapState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = {};
                }
            }
            else if (headByte === 0xc4) {
                // bin 8
                var size = this.lookU8();
                object = this.decodeBinary(size, 1);
            }
            else if (headByte === 0xc5) {
                // bin 16
                var size = this.lookU16();
                object = this.decodeBinary(size, 2);
            }
            else if (headByte === 0xc6) {
                // bin 32
                var size = this.lookU32();
                object = this.decodeBinary(size, 4);
            }
            else if (headByte === 0xd4) {
                // fixext 1
                object = this.decodeExtension(1, 0);
            }
            else if (headByte === 0xd5) {
                // fixext 2
                object = this.decodeExtension(2, 0);
            }
            else if (headByte === 0xd6) {
                // fixext 4
                object = this.decodeExtension(4, 0);
            }
            else if (headByte === 0xd7) {
                // fixext 8
                object = this.decodeExtension(8, 0);
            }
            else if (headByte === 0xd8) {
                // fixext 16
                object = this.decodeExtension(16, 0);
            }
            else if (headByte === 0xc7) {
                // ext 8
                var size = this.lookU8();
                object = this.decodeExtension(size, 1);
            }
            else if (headByte === 0xc8) {
                // ext 16
                var size = this.lookU16();
                object = this.decodeExtension(size, 2);
            }
            else if (headByte === 0xc9) {
                // ext 32
                var size = this.lookU32();
                object = this.decodeExtension(size, 4);
            }
            else {
                throw new DecodeError("Unrecognized type byte: " + prettyByte(headByte));
            }
            this.complete();
            var stack = this.stack;
            while (stack.length > 0) {
                // arrays and maps
                var state = stack[stack.length - 1];
                if (state.type === 0 /* ARRAY */) {
                    state.array[state.position] = object;
                    state.position++;
                    if (state.position === state.size) {
                        stack.pop();
                        object = state.array;
                    }
                    else {
                        continue DECODE;
                    }
                }
                else if (state.type === 1 /* MAP_KEY */) {
                    if (!isValidMapKeyType(object)) {
                        throw new DecodeError("The type of key must be string or number but " + typeof object);
                    }
                    if (object === "__proto__") {
                        throw new DecodeError("The key __proto__ is not allowed");
                    }
                    state.key = object;
                    state.type = 2 /* MAP_VALUE */;
                    continue DECODE;
                }
                else {
                    // it must be `state.type === State.MAP_VALUE` here
                    state.map[state.key] = object;
                    state.readCount++;
                    if (state.readCount === state.size) {
                        stack.pop();
                        object = state.map;
                    }
                    else {
                        state.key = null;
                        state.type = 1 /* MAP_KEY */;
                        continue DECODE;
                    }
                }
            }
            return object;
        }
    };
    Decoder.prototype.readHeadByte = function () {
        if (this.headByte === HEAD_BYTE_REQUIRED) {
            this.headByte = this.readU8();
            // console.log("headByte", prettyByte(this.headByte));
        }
        return this.headByte;
    };
    Decoder.prototype.complete = function () {
        this.headByte = HEAD_BYTE_REQUIRED;
    };
    Decoder.prototype.readArraySize = function () {
        var headByte = this.readHeadByte();
        switch (headByte) {
            case 0xdc:
                return this.readU16();
            case 0xdd:
                return this.readU32();
            default: {
                if (headByte < 0xa0) {
                    return headByte - 0x90;
                }
                else {
                    throw new DecodeError("Unrecognized array type byte: " + prettyByte(headByte));
                }
            }
        }
    };
    Decoder.prototype.pushMapState = function (size) {
        if (size > this.maxMapLength) {
            throw new DecodeError("Max length exceeded: map length (" + size + ") > maxMapLengthLength (" + this.maxMapLength + ")");
        }
        this.stack.push({
            type: 1 /* MAP_KEY */,
            size: size,
            key: null,
            readCount: 0,
            map: {},
        });
    };
    Decoder.prototype.pushArrayState = function (size) {
        if (size > this.maxArrayLength) {
            throw new DecodeError("Max length exceeded: array length (" + size + ") > maxArrayLength (" + this.maxArrayLength + ")");
        }
        this.stack.push({
            type: 0 /* ARRAY */,
            size: size,
            array: new Array(size),
            position: 0,
        });
    };
    Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {
        var _a;
        if (byteLength > this.maxStrLength) {
            throw new DecodeError("Max length exceeded: UTF-8 byte length (" + byteLength + ") > maxStrLength (" + this.maxStrLength + ")");
        }
        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
            throw MORE_DATA;
        }
        var offset = this.pos + headerOffset;
        var object;
        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {
            object = this.keyDecoder.decode(this.bytes, offset, byteLength);
        }
        else if (byteLength > TEXT_DECODER_THRESHOLD) {
            object = utf8DecodeTD(this.bytes, offset, byteLength);
        }
        else {
            object = utf8DecodeJs(this.bytes, offset, byteLength);
        }
        this.pos += headerOffset + byteLength;
        return object;
    };
    Decoder.prototype.stateIsMapKey = function () {
        if (this.stack.length > 0) {
            var state = this.stack[this.stack.length - 1];
            return state.type === 1 /* MAP_KEY */;
        }
        return false;
    };
    Decoder.prototype.decodeBinary = function (byteLength, headOffset) {
        if (byteLength > this.maxBinLength) {
            throw new DecodeError("Max length exceeded: bin length (" + byteLength + ") > maxBinLength (" + this.maxBinLength + ")");
        }
        if (!this.hasRemaining(byteLength + headOffset)) {
            throw MORE_DATA;
        }
        var offset = this.pos + headOffset;
        var object = this.bytes.subarray(offset, offset + byteLength);
        this.pos += headOffset + byteLength;
        return object;
    };
    Decoder.prototype.decodeExtension = function (size, headOffset) {
        if (size > this.maxExtLength) {
            throw new DecodeError("Max length exceeded: ext length (" + size + ") > maxExtLength (" + this.maxExtLength + ")");
        }
        var extType = this.view.getInt8(this.pos + headOffset);
        var data = this.decodeBinary(size, headOffset + 1 /* extType */);
        return this.extensionCodec.decode(data, extType, this.context);
    };
    Decoder.prototype.lookU8 = function () {
        return this.view.getUint8(this.pos);
    };
    Decoder.prototype.lookU16 = function () {
        return this.view.getUint16(this.pos);
    };
    Decoder.prototype.lookU32 = function () {
        return this.view.getUint32(this.pos);
    };
    Decoder.prototype.readU8 = function () {
        var value = this.view.getUint8(this.pos);
        this.pos++;
        return value;
    };
    Decoder.prototype.readI8 = function () {
        var value = this.view.getInt8(this.pos);
        this.pos++;
        return value;
    };
    Decoder.prototype.readU16 = function () {
        var value = this.view.getUint16(this.pos);
        this.pos += 2;
        return value;
    };
    Decoder.prototype.readI16 = function () {
        var value = this.view.getInt16(this.pos);
        this.pos += 2;
        return value;
    };
    Decoder.prototype.readU32 = function () {
        var value = this.view.getUint32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readI32 = function () {
        var value = this.view.getInt32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readU64 = function () {
        var value = getUint64(this.view, this.pos);
        this.pos += 8;
        return value;
    };
    Decoder.prototype.readI64 = function () {
        var value = getInt64(this.view, this.pos);
        this.pos += 8;
        return value;
    };
    Decoder.prototype.readF32 = function () {
        var value = this.view.getFloat32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readF64 = function () {
        var value = this.view.getFloat64(this.pos);
        this.pos += 8;
        return value;
    };
    return Decoder;
}());

//# sourceMappingURL=Decoder.mjs.map
;// CONCATENATED MODULE: ./node_modules/@msgpack/msgpack/dist.es5+esm/decode.mjs

var defaultDecodeOptions = {};
/**
 * It decodes a single MessagePack object in a buffer.
 *
 * This is a synchronous decoding function.
 * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.
 */
function decode(buffer, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    var decoder = new Decoder_Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
    return decoder.decode(buffer);
}
/**
 * It decodes multiple MessagePack objects in a buffer.
 * This is corresponding to {@link decodeMultiStream()}.
 */
function decodeMulti(buffer, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
    return decoder.decodeMulti(buffer);
}
//# sourceMappingURL=decode.mjs.map
;// CONCATENATED MODULE: ./src/helpers/http_helper.ts




/**
 * IM 网络请求类
 */
var IMRequest = /** @class */ (function () {
    /** 构造方法
     * @param deviceGuid 设备Guid
     * @param hostApi IMAPI 地址
     * @param hostWs IM WS 地址
     * @param token jwt Token
     * @param platform 平台
     * @param deviceName 设备名称
     * @param error 全局错误回调
     */
    function IMRequest(deviceGuid, hostApi, hostWs, token, platform, deviceName, error) {
        this.callBack = new MessageCallBack();
        this._hostApi = hostApi !== null && hostApi !== void 0 ? hostApi : 'https://localhost:5001/';
        if (this._hostApi.endsWith('/')) {
            this._hostApi = this._hostApi.substring(0, this._hostApi.length - 1);
        }
        this._hostWs = hostWs !== null && hostWs !== void 0 ? hostWs : 'wss://localhost:5003/';
        if (this._hostWs.endsWith('/')) {
            this._hostWs = this._hostWs.substring(0, this._hostWs.length - 1);
        }
        this._token = token !== null && token !== void 0 ? token : '';
        this._platform = platform !== null && platform !== void 0 ? platform : Platform.Unknown;
        this._deviceGuid = deviceGuid;
        this._deviceName = deviceName !== null && deviceName !== void 0 ? deviceName : 'Default';
        this.Error = error !== null && error !== void 0 ? error : function (status, message) { print("error: " + message + " [" + status + "]"); };
    }
    /** 获取 websocket 连接url */
    IMRequest.prototype.getWsConnetc = function () {
        return this._hostWs + "/api/ws?token=" + this._token + "&platform=" + this._platform + "&deviceGuid=" + this._deviceGuid + "&deviceName=" + this._deviceName;
    };
    /** 初始化消息回调
     * @param messageCallBack 回调类型
     */
    IMRequest.prototype.initMessageCallback = function (messageCallBack) {
        this.callBack = messageCallBack;
    };
    /** 处理 Websocket 收到的消息
     * @param data string / Uint8Array
     */
    IMRequest.prototype.onWsData = function (data) {
        if (typeof data == "string") {
            var cmds = data.split('::');
            var cmdType = Number.parseInt(cmds[1]);
            if (cmds.length < 2) {
                this.Error(-2, "Receive Unknown Command: " + data);
            }
            else if (cmdType == CommandType.Ping) {
                this.callBack.onPing.call(this, Number.parseInt(cmds[2]));
            }
            else if (cmdType == CommandType.Exit) {
                this.callBack.onWsClose.call(this, cmds[2]);
            }
            else if (cmdType == CommandType.GroupJoinInvite) {
                var creator = Number.parseInt(cmds[2]);
                var group = JSON.parse(cmds[3]);
                var isComfirm = cmds[4] == 'T';
                var time = Number.parseInt(cmds[5]);
                this.callBack.onGroupInvite.call(this, creator, group, isComfirm, time);
            }
            else if (cmdType == CommandType.Recall) {
                var sourceId = Number.parseInt(cmds[2]);
                var messageId = Number.parseInt(cmds[3]);
                var targetId = Number.parseInt(cmds[4]);
                this.callBack.onMessageRecall.call(this, sourceId, messageId, targetId, cmds[5] == 'G');
            }
            else if (cmdType == CommandType.UpdateMessage) {
                var message = JSON.parse(cmds[2]);
                this.callBack.onMessageUpdate.call(this, message, cmds[3] == 'G');
            }
            else if (cmdType == CommandType.GroupUpdate) {
                var group = JSON.parse(cmds[2]);
                this.callBack.onGroupUpdate.call(this, group);
            }
            else if (cmdType == CommandType.UserUpdate) {
                var user = JSON.parse(cmds[2]);
                this.callBack.onUserUpdate.call(this, user);
            }
            else {
                this.Error(-2, "Receive Other Command: " + data);
            }
        }
        else {
            var buffer = new Uint8Array(data);
            if (buffer.length > 0) {
                var map = decode(buffer);
                if (map["MessageType"] == MessageTypeEnum.Normal) {
                    this.callBack.onReceiveNormalMessage.call(this, NormalMessage.fromMap(map));
                }
                else if (map["MessageType"] == MessageTypeEnum.Group) {
                    this.callBack.onReceiveGroupMessage.call(this, GroupMessage.fromMap(map));
                }
                else {
                    this.Error(-1, "ws:error:" + map['MessageType']);
                }
            }
            else {
                this.Error(-1, "ws:error:" + data);
            }
        }
    };
    return IMRequest;
}());

/**
 * 消息回调类型
 */
var MessageCallBack = /** @class */ (function () {
    function MessageCallBack() {
        /**
         * Ping 回调
         * @param ping ping 内容
         * @returns
         */
        this.onPing = function (userId) { return console.log("onPing: userId:" + userId); };
        /**
         * 收到单人消息回调
         * @param normal 单人消息
         * @returns
         */
        this.onReceiveNormalMessage = function (normal) { return console.log("onReceiveNormalMessage: normal:" + normal); };
        /**
         * 收到群组消息回调
         * @param group 群组消息
         * @returns
         */
        this.onReceiveGroupMessage = function (group) { return console.log("onReceiveGroupMessage: group:" + group); };
        /**
         * close 回调
         * @param message close 内同
         * @returns
         */
        this.onWsClose = function (message) { return console.log("onWsClose: message:" + message); };
        /**
         * 群组邀请回调
         * @param creator 创建人
         * @param group 群组信息
         * @param isConfirm 是否需要确认
         * @param time 邀请时间
         * @returns
         */
        this.onGroupInvite = function (creator, group, isConfirm, time) { return console.log("onGroupInvite: creator:" + creator + ",group:" + group + ",isConfirm:" + isConfirm + ",time" + time); };
        /**
         * 消息撤回回调
         * @param sourceId 消息源Id
         * @param messageId 消息Id
         * @param targetId 目标Id
         * @param isGroup 是否是群组消息
         * @returns
         */
        this.onMessageRecall = function (sourceId, messageId, targetId, isGroup) { return console.log("onMessageRecall: sourceId:" + sourceId + ",messageId:" + messageId + ",targetId:" + targetId + ",isGroup:" + isGroup); };
        /**
         * 消息更新回调
         * @param message 消息内容
         * @param isGroup 是否是群组消息
         * @returns
         */
        this.onMessageUpdate = function (message, isGroup) { return console.log("onMessageUpdate: message:" + message + ",isGroup:" + isGroup); };
        /**
         * 群组更新回调
         * @param group 群组信息
         * @returns
         */
        this.onGroupUpdate = function (group) { return console.log("onGroupUpdate: group:" + group); };
        /**
         * 用户更新回调
         * @param user 用户信息
         * @returns
         */
        this.onUserUpdate = function (user) { return console.log("onUserUpdate: user:" + user); };
    }
    return MessageCallBack;
}());


// EXTERNAL MODULE: ./node_modules/spark-md5/spark-md5.js
var spark_md5 = __webpack_require__(322);
var spark_md5_default = /*#__PURE__*/__webpack_require__.n(spark_md5);
;// CONCATENATED MODULE: ./src/helpers/file_helper.ts
var file_helper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var file_helper_generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




/** 文件帮助类 */
var FileHelper = /** @class */ (function () {
    function FileHelper(hostName, token, sizeLimit, StepFunc) {
        if (sizeLimit === void 0) { sizeLimit = 10485760; }
        this._hostName = hostName !== null && hostName !== void 0 ? hostName : 'https://localhost:5001';
        if (this._hostName.endsWith('/')) {
            this._hostName = this._hostName.substring(0, this._hostName.length - 1);
        }
        this._controllerName = 'Common';
        this._token = token !== null && token !== void 0 ? token : '';
        this._sizeLimit = sizeLimit;
        this._uploadCallback = StepFunc !== null && StepFunc !== void 0 ? StepFunc : function (x, y) {
            var step = Number.parseInt((x / y * 100).toString());
            print("\u5F53\u524D\u8FDB\u5EA6: " + step + " %");
        };
    }
    /** 上传指定的文件
     * @param file 文件对象
     * @param onCompleted 上传完成回调
     */
    FileHelper.prototype.Upload = function (file, onCompleted) {
        var _this = this;
        this.GetMD5(file, function (md5) { return file_helper_awaiter(_this, void 0, void 0, function () {
            var headers, urlBeforeUpload, response, result, fileId, _headers, count, guid, urlLargeFile, index, start, end, data, response_1, result_1, urlSmallFile, data, response_2, result;
            var _a, _b, _c;
            return file_helper_generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        headers = new Map([['Authorization', "Bearer " + this._token]]);
                        urlBeforeUpload = this._hostName + "/api/" + this._controllerName + "/BeforeUploadFile";
                        return [4 /*yield*/, http.get(urlBeforeUpload + ("?md5=" + md5 + "&fileName=" + file.name), headers)];
                    case 1:
                        response = _d.sent();
                        if (!(response.status == 200)) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        result = _d.sent();
                        if (result.status == 0 && ((_a = result.data) !== null && _a !== void 0 ? _a : 0) > 0) {
                            onCompleted(result.data);
                        }
                        _d.label = 3;
                    case 3:
                        fileId = 0;
                        _headers = new Headers();
                        _headers.set("Authorization", "Bearer " + this._token);
                        _headers.set("Content-Type", file.name.toContentType());
                        if (!(file.size > this._sizeLimit)) return [3 /*break*/, 10];
                        count = Math.ceil(file.size / this._sizeLimit);
                        guid = Guid();
                        urlLargeFile = this._hostName + "/api/" + this._controllerName + "/UploadLargeFile";
                        index = 0;
                        _d.label = 4;
                    case 4:
                        if (!(index < count)) return [3 /*break*/, 9];
                        start = index * this._sizeLimit;
                        end = start + this._sizeLimit;
                        if (index == count - 1) {
                            end = file.size;
                        }
                        data = new FormData();
                        data.append("file", file.slice(start, end, file.type), file.name);
                        return [4 /*yield*/, fetch(urlLargeFile + "?index=" + index + "&count=" + count + "&guid=" + guid, {
                                method: "POST", headers: _headers, body: data, mode: "cors", credentials: "include",
                            })];
                    case 5:
                        response_1 = _d.sent();
                        this._uploadCallback(index + 1, count);
                        if (!(response_1.status == 200)) return [3 /*break*/, 7];
                        return [4 /*yield*/, response_1.json()];
                    case 6:
                        result_1 = _d.sent();
                        if (result_1.status == 0) {
                            fileId = (_b = result_1.data) !== null && _b !== void 0 ? _b : 0;
                        }
                        else {
                            throw new ImException(result_1.message);
                        }
                        return [3 /*break*/, 8];
                    case 7: throw new ImException("\u8BF7\u6C42\u9519\u8BEF:[" + response_1.status + "]");
                    case 8:
                        index++;
                        return [3 /*break*/, 4];
                    case 9:
                        if (index == count) {
                            onCompleted(fileId);
                        }
                        return [3 /*break*/, 14];
                    case 10:
                        urlSmallFile = this._hostName + "/api/" + this._controllerName + "/UploadSmallFile";
                        this._uploadCallback(0, 10);
                        data = new FormData();
                        this._uploadCallback(3, 10);
                        data.append("file", file, file.name);
                        this._uploadCallback(4, 10);
                        return [4 /*yield*/, fetch(urlSmallFile, {
                                method: "POST", headers: _headers, body: data, mode: "cors", credentials: "include",
                            })];
                    case 11:
                        response_2 = _d.sent();
                        this._uploadCallback(9, 10);
                        if (!(response_2.status == 200)) return [3 /*break*/, 13];
                        return [4 /*yield*/, response_2.json()];
                    case 12:
                        result = _d.sent();
                        if (result.status == 0) {
                            onCompleted((_c = result.data) !== null && _c !== void 0 ? _c : 0);
                        }
                        else {
                            throw new ImException(result.message);
                        }
                        this._uploadCallback(10, 10);
                        return [3 /*break*/, 14];
                    case 13: throw new ImException("\u8BF7\u6C42\u9519\u8BEF:[" + response_2.status + "]");
                    case 14: return [2 /*return*/];
                }
            });
        }); });
    };
    /** 下载指定 [fileId] 文件Id的文件
     * @param fileId 文件Id
     * @param isThumb true：如果有则获取图片的缩略图
     * @returns
     */
    FileHelper.prototype.Download = function (fileId, isThumb) {
        var _a, _b;
        if (isThumb === void 0) { isThumb = true; }
        return file_helper_awaiter(this, void 0, void 0, function () {
            var urlDownload, header, response, content_disposition, fileName, fileInfo;
            return file_helper_generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        urlDownload = this._hostName + "/api/Common/GetFile?fileId=" + fileId + "&isThumb=" + isThumb;
                        header = new Map([['Authorization', "Bearer " + this._token]]);
                        return [4 /*yield*/, http.get(urlDownload, header)];
                    case 1:
                        response = _c.sent();
                        if (response.headers.has('content-disposition')) {
                            content_disposition = response.headers.get('content-disposition');
                            fileName = (_b = (_a = content_disposition === null || content_disposition === void 0 ? void 0 : content_disposition.split(';')[1]) === null || _a === void 0 ? void 0 : _a.split('=')[1]) !== null && _b !== void 0 ? _b : 'unknown.unknown';
                            fileInfo = new FileInfo(fileName, response.blob());
                            return [2 /*return*/, fileInfo];
                        }
                        else {
                            return [2 /*return*/, new FileInfo('unknown.unknown', response.blob())];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /** 获取文件 MD5 值
     * @param file 文件对象
     * @param onCompleted 完成回调
     */
    FileHelper.prototype.GetMD5 = function (file, onCompleted) {
        var spark = new (spark_md5_default())();
        var fileReader = new FileReader();
        if (file.size > this._sizeLimit) { // large file
            var index_1 = 0;
            var count_1 = Math.ceil(file.size / this._sizeLimit);
            var that_1 = this;
            fileReader.onload = function (ev) {
                if (typeof this.result == "string") {
                    index_1 += 1;
                    spark.appendBinary(this.result);
                    var start_1 = index_1 * that_1._sizeLimit;
                    var end_1 = start_1 + that_1._sizeLimit;
                    if (index_1 < count_1) {
                        fileReader.readAsBinaryString(file.slice(start_1, end_1));
                        that_1._uploadCallback(index_1 + 1, count_1);
                    }
                    else {
                        end_1 = file.size;
                        var md5 = spark.end();
                        onCompleted(md5);
                    }
                }
            };
            var start = index_1 * that_1._sizeLimit;
            var end = start + that_1._sizeLimit;
            fileReader.readAsBinaryString(file.slice(start, end));
            that_1._uploadCallback(index_1 + 1, count_1);
        }
        else { // small file
            fileReader.onload = function (ev) {
                if (typeof this.result == "string") {
                    spark.appendBinary(this.result);
                    var md5 = spark.end();
                    onCompleted(md5);
                }
            };
            fileReader.readAsBinaryString(file);
        }
    };
    return FileHelper;
}());


;// CONCATENATED MODULE: ./src/index.ts
/*********************************** import models ************************************/






/*********************************** ************* ************************************/
/*********************************** import  utils ************************************/




/*********************************** ************* ************************************/
/*********************************** import helper ************************************/




/*********************************** ************* ************************************/ 

}();
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=xsoftimsdk.js.map